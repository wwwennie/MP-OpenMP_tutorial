% OpenMP demo 2: Red-Black Method
% UCSB GS3 Workshop
% 6 Sept. 2017

## Basic demo of OpenMP for nested loops

### Concepts we will learn
+ Collapse and nested loops
+ Synchronization and nowait

## A typical grid problem

![](./rb-grid.png)

## Parallelizing the code

We will use `fortran` in the following example.

Let's look at the code in serial

~~~~~{.fortran}
program checker

    use omp_lib

    implicit none

    ! specify size of grid and iteration here
    integer, parameter                  :: grid_x = 10, grid_y= 5000, numitr = 10000
    double precision, dimension(0:grid_x-1, 0:grid_y-1)   :: grid
    double precision                    :: tot = 0.0
    double precision                    :: start_time, final_time
    integer                             :: i, j, n

    ! start timer
    start_time = omp_get_wtime()
    final_time = 0.0

    ! Note: for Fortran, loops are more efficient
    !   if written with column major order array indexing

    ! TODO: Insert OpenMP pragma here,
    ! hint: omp parallel for, collapse, schedule, nowait
    ! initialize the grid
    do j = 1, grid_y 
        do i = 1, grid_x 
            grid(i, j) = mod((i * j), 15)
        end do
    end do


    ! Because each iteration depends on previous iteration
    !   cannot parallelize over numiter
    ! Instead, parallelize over updating grid points

    do n = 1, numitr
    !$omp parallel private(i, j)
        ! >>>>> Update red points <<<<<

        ! TODO: OpenMP directive here
        ! hint: omp parallel for, collapse, schedule, nowait
        do j = 1, grid_y - 2, 2
            do i = 1, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do


        ! TODO: OpenMP directive here
        ! hint: omp parallel for, collapse, schedule, nowait
        do j = 2, grid_y - 2, 2
            do i = 2, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do

        ! ------------------------------------------------!
        ! >>>  Update black points <<<<

        ! TODO: OpenMP directive here
        ! hint: omp parallel for, collapse, schedule, nowait
        do j = 2, grid_y - 2, 2
            do i = 1, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do


        ! TODO: OpenMP directive here
        ! hint: omp parallel for, collapse, schedule, nowait
        do j = 1, grid_y - 2, 2
            do i = 2, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do

    !$omp end parallel
    end do

    ! TODO: Parallelize this loop, insert OpenMP
    ! hint: omp parallel for, collapse, schedule, reduction
    do j = 1, grid_y 
        do i = 1, grid_x 
            tot = tot + grid(i, j)
        end do
    end do

    ! Get total run time
    final_time = omp_get_wtime() - start_time;

    write (*, '(a,f20.2)') 'Sum: ', tot
    write (*, '(a,f20.6)') 'Total time:  ', final_time
    write (* , *)
    stop
end program checker
~~~~~

##

Let's now look at the same code with OpenMP directives

~~~~~{.fortran}
program checker

    use omp_lib

    implicit none

    integer, parameter                  :: grid_x = 10, grid_y= 5000, numitr = 10000
    double precision, dimension(0:grid_x-1, 0:grid_y-1)   :: grid
    double precision                    :: tot = 0.0
    double precision                    :: start_time, final_time
    integer                             :: i, j, n

    ! start timer
    start_time = omp_get_wtime()
    final_time = 0.0

    ! Note: for Fortran, loops are more efficient
    !   if written with column major order array indexing

    !$omp parallel do private(i) schedule(static)
    !initialize the grid
    do j = 1, grid_y 
        do i = 1, grid_x 
            grid(i, j) = mod((i * j), 15)
        end do
    end do
    !$omp end parallel do


    ! Because each iteration dependends on previous iteration
    !   cannot parallelize over numiter
    ! Instead, parallelize over updating grid points

    do n = 1, numitr
    !$omp parallel private(i, j)
        ! >>>>>> Update red points <<<<

        !$omp do schedule(static)
        ! updates odd columns
        do j = 1, grid_y - 2, 2
            do i = 1, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do
        !$omp end do nowait


        !$omp do schedule(static)
        ! updates even columns
        do j = 2, grid_y - 2, 2
            do i = 2, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do
        !$omp end do

        ! ------------------------------------------------!
        ! >>>>> Update black points <<<<<

        !$omp do schedule(static)
        do j = 2, grid_y - 2, 2
            do i = 1, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do
        !$omp end do nowait

        !$omp do schedule(static)
        do j = 1, grid_y - 2, 2
            do i = 2, grid_x - 2, 2
                grid(i, j) = 0.2 * (grid(i-1, j) + grid(i+1, j) +&
                            grid(i, j-1) + grid(i, j+1))
            end do
        end do
        !$omp end do
    !$omp end parallel
    end do

    !$omp parallel do private(i) schedule(static) reduction(+:tot)
    do j = 1, grid_y 
        do i = 1, grid_x
            tot = tot + grid(i, j)
        end do
    end do
    !$omp end parallel do

    ! Get total run time
    final_time = omp_get_wtime() - start_time;
 
    write (*, '(a,f14.2)') 'Sum: ', tot
    write (*, '(a,f20.6)') 'Total time:  ', final_time
    write (*, *)
    stop
end program checker

~~~~~

## Hello World: Compiling

Machine and architecture dependent!

~~~~~{.bash}
-> wwwennie@knot:~/OpenMP_tut/checker_method$
-> wwwennie@knot:~/OpenMP_tut/checker_method$ make
ifort -qopenmp -o fortran_checker_omp.x fortran_checker_omp.f90
ifort -qopenmp -o fortran_checker_todo.x fortran_checker_todo.f90
~~~~~

## Running Red-Black Method

~~~~~{.bash}
wwwennie@knot:~/OpenMP_tut/checker_method$ cat job.checker
~~~~~

~~~~~{.bash}
#!/bin/bash
#PBS -l nodes=1:ppn=1
#PBS -l walltime=00:10:00
#PBS -j oe
#PBS -V
cd $PBS_O_WORKDIR
export OMP_NUM_THREADS=4
echo "NO parallelization"
echo "-----------------------"
mpirun ./fortran_checker_todo.x
echo ""
echo "WITH parallelization"
echo "-----------------------"
mpirun ./fortran_checker_omp.x
~~~~~

~~~~~{.bash}
wwwennie@knot:~/OpenMP_tut/checker_method$ qsub job.checker
~~~~~

## Output
~~~~~{.bash}
NO parallelization
-----------------------
Sum:             89087.42
Total time:              3.926210

WITH parallelization
-----------------------
Sum:       89087.42
Total time:              0.234343
~~~~~
